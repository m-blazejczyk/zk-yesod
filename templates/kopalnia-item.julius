if(#{isEdit}) {
  $(document).ready(function() {

    var initAjax = function(ajaxUrl) {
      return {
        url: ajaxUrl,
        dataType: 'json',
        data: function(term, page) {
          return {
            q: term
          }
        },
        results: function(data, page) {
          return data
        }
      }
    };

    $('#' + '#{rawJS $ lookupEditParam FldTytul fields}').editableZK();

    $('#' + '#{rawJS $ lookupEditParam FldRodzaj fields}').editableZK(
      #{rawJS $ decodeUtf8 rodzajeToJson});

    $('#' + '#{rawJS $ lookupEditParam FldJezyk fields}').editableZK(
      #{rawJS $ decodeUtf8 jezykiToJson});

    $('#' + '#{rawJS $ lookupEditParam FldLinkGlowny fields}').editableZK({
      name: 'url',
      label: "Etykietka",
      placeholder: "Wpisz coś",
      display: function(value) {
        if (value.trim() == '')
          return 'link do zawartości [brak]';
        else
          return 'link do zawartości [ustawiony]';
      }
    });

    $('#' + '#{rawJS $ lookupEditParam FldDataWydania fields}').editableZK({
      fields: {
        year: {
          type: 'text',
          label: 'Rok',
          placeholder: 'rok'
        },
        month: {
          type: 'text',
          label: 'Miesiąc',
          placeholder: 'miesiąc (np. 2 albo 11)'
        }
      },
      value: {
        year: '#{rawJS $ fst dataWyd}',
        month: '#{rawJS $ snd dataWyd}'
      },
      validate: function(value) {
        if(value) {
          if(value.year) {
            var year = parseInt(value.year);
            if(isNaN(year) || year < 1800 || year > (new Date()).getFullYear() + 1)
              return 'Niepoprawny rok';
          }
          if(value.month) {
            var month = parseInt(value.month);
            if(isNaN(month) || month < 1 || month > 12)
              return 'Niepoprawny miesiąc';
          }
          if(!value.year && value.month) 
            return 'Rok jest wymagany, jeśli podajesz miesiąc';
        }
      },
      display: function(value, response) {
        if (!value || (!value.month && !value.year)) {
          return '[brak]';
        } else {
          if(value.month) {
            var months = ['styczeń', 'luty', 'marzec', 'kwiecień', 'maj', 'czerwiec', 'lipiec', 'sierpień',
                          'wrzesień', 'październik', 'listopad', 'grudzień'];
            var month = parseInt(value.month), monthStr = value.month;
            return (month >= 1 && month <= 12 ? months[month-1] + " " : '') + value.year;
          } else {
            return value.year;
          }
        }
      }
    });

    $('#' + '#{rawJS $ lookupEditParam FldIsbn fields}').editableZK(
      { emptytext: '[brak]' });

    $('#' + '#{rawJS $ lookupEditParam FldObjetosc fields}').editableZK(
      { emptytext: '[brak]', placeholder: 'np. 12 stron' });

    $('#' + '#{rawJS $ lookupEditParam FldStrony fields}').editableZK(
      { emptytext: '[brak]', placeholder: 'np. 18-22' });

    $('#' + '#{rawJS $ lookupEditParam FldOpis fields}').editableZK(
      { emptytext: '[brak]', rows: 5 });

    var wydawcaData = #{rawJS $ decodeUtf8 wydawcyJson};
    var wydawca = {
      emptytext: "[brak]",
      select2: {
        multiple: true,
        placeholder: "wybierz wydawcę",
        allowClear: true,
        width: '100%',
        minimumInputLength: 2,
        quietMillis: 250
      }
    };

    var wydawcyId = '#' + '#{rawJS $ lookupEditParam FldWydawcy fields}';
    var wydawcyArr = wydawcaData.data;
    wydawca.select2.data = function() { return { results: wydawcyArr }; };
    $(wydawcyId).editableZK(wydawca);

    // This editable is configured differently because it's purpose is to *add* new publisher records.
    var addWydawcyId = '#' + '#{rawJS $ lookupEditParam FldAddWydawca fields}';
    $(addWydawcyId).editableZK({
      fields: {
        nazwa: {
          type: 'text',
          label: 'Nazwa',
          placeholder: 'nazwa'
        },
        url: {
          type: 'text',
          label: 'Strona WWW',
          placeholder: 'adres strony www'
        }
      },
      value: {
        nazwa: '',
        url: ''
      },
      validate: function(value) {
        if(value) {
          if(value.url && !value.nazwa) {
            return 'Nazwa wydawcy jest wymagana';
          }
          // TODO: validate the url
        }
      },
      onAdd: function(value, postResult) {
        // This will make the newly added item available in the select2 dropdown for publishers.
        wydawcyArr.push({ id: postResult, text: value.nazwa });
        // Add the name of the newly added item to the html of FldWydawcy - or replace it if it is [brak].
        var existing = $(wydawcyId).html();
        $(wydawcyId).html(existing.indexOf('[brak]') > -1 ? value.nazwa : existing + ', ' + value.nazwa);
        // Add the new item to the field editor for FldWydawcy and to its previously grabbed data
        // as if it was always part of the publishers' list.
        $(wydawcyId).changeEditableDataZK(function(editData) {
          editData[0].value.push({ id: postResult, text: value.nazwa });
          return editData;
        });
      }
    });

    var initAuthors = function(id, placeholder) {
      $('#' + id).editableZK({
        emptytext: "[brak]",
        select2: {
          multiple: true,
          placeholder: placeholder,
          allowClear: true,
          width: '100%',
          minimumInputLength: 2,
          quietMillis: 250,
          ajax: initAjax('@{FindAutorR}')
        }
      })
    };
    initAuthors('#{rawJS $ lookupEditParam FldAutor fields}', 'wybierz autorów');
    initAuthors('#{rawJS $ lookupEditParam FldTlumacz fields}', 'wybierz tłumaczy');
    initAuthors('#{rawJS $ lookupEditParam FldWywiad fields}', 'wybierz osoby zadające pytania');
    initAuthors('#{rawJS $ lookupEditParam FldRedaktor fields}', 'wybierz redaktorów');

    var initTags = function(ajaxUrl) {
      return {
        emptytext: "[brak]",
        select2: {
          multiple: true,
          placeholder: "wybierz albo wpisz nowe",
          allowClear: true,
          width: '100%',
          minimumInputLength: 2,
          quietMillis: 250,
          tags: true,
          tokenSeparators: [';'],
          createSearchChoice: function (term) {
            var tterm = $.trim(term);
            return {
              id: 'NEW:' + tterm,  // Don't change 'NEW:' here - see processXEditableMulti in XEditable.hs
              text: tterm + ' (nowe)'
            };
          },
          ajax: initAjax(ajaxUrl)
        }
      };
    };

    $('#' + '#{rawJS $ lookupEditParam FldHasla fields}').editableZK(initTags('@{FindHasloR}'));
    $('#' + '#{rawJS $ lookupEditParam FldSlowaKlucz fields}').editableZK(initTags('@{FindSlowoR}'));

    $('#' + '#{rawJS $ lookupEditParam FldRodzic fields}').editableZK({
      fields: {
        rodzic: {
          type: 'select2',
          label: 'Rodzic',
          select2: {
            multiple: false,
            placeholder: 'wybierz publikację',
            allowClear: true,
            width: '100%',
            minimumInputLength: 2,
            quietMillis: 250,
            ajax: initAjax('@{FindKopalniaR}')
          }
        },
        dzial: {
          type: 'select2',
          label: 'Dział',
          select2: {
            multiple: false,
            placeholder: 'wybierz publikację',
            allowClear: true,
            width: '100%',
            minimumInputLength: 2,
            quietMillis: 250,
            ajax: initAjax('@{FindKopalniaR}')
          }
        },
        nkRodzic: {
          type: 'select2',
          label: 'Rodzic niekom.',
          select2: {
            multiple: false,
            placeholder: 'wybierz albo dodaj publikację',
            allowClear: true,
            width: '100%',
            minimumInputLength: 2,
            quietMillis: 250,
            ajax: initAjax('@{FindNkPubR}')
          }
        },
        opis: {
          type: 'text',
          label: 'Opis rodzica',
          placeholder: 'opis'
        }
      },
      value: {
        rodzic:   '#{rawJS $ maybe "" kopalniaToFieldValue mRodzic}',  // e.g. "2||Zeszyty Komiksowe"
        dzial:    '#{rawJS $ maybe "" kopalniaToFieldValue mDzial}',
        nkRodzic: '#{rawJS $ maybe "" nkPubToFieldValue mNkRodzic}',
        opis:     '#{rawJS $ maybe "" id (kopalniaRodzicOpis kopalnia)}'
      },
      validate: function(value) {
        if(value) {
          if(value.dzial && !value.rodzic) {
            return 'Jeśli podajesz dział, musisz podać też rodzica komiksowego';
          } else if(value.rodzic && value.nkRodzic) {
            return 'Nie możesz jednocześnie podać rodzica komiksowego i niekomiksowego';
          } else if(value.dzial && value.nkRodzic) {
            return 'Nie możesz podać działu publikacji niekomiksowej';
          } else if(value.rodzic === value.dzial) {
            return 'Rodzic i dział nie mogą być tą samą publikacją';
          }
        }
      },
      display: function(value, response) {
        var retVal = "[brak]";
        if(value.rodzic != "") {
          var rodzicV = value.rodzic.split("||");
          if(rodzicV.length == 2) {
            retVal = rodzicV[1];

            if(value.dzial != "") {
              var dzialV = value.dzial.split("||");
              if(dzialV.length == 2) {
                retVal = retVal + " (dział: " + dzialV[1] + ")";
              }
            }

            if(value.opis != "") {
              retVal = retVal + "; " + value.opis;
            }
          }
        } else if(value.nkRodzic != "") {
          var rodzicV = value.nkRodzic.split("||");
          if(rodzicV.length == 2) {
            retVal = rodzicV[1];

            if(value.opis != "") {
              retVal = retVal + "; " + value.opis;
            }
          }
        }

        return retVal;
      }
    });

  });
}
